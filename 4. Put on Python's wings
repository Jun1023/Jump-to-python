# 1. 다음은 Calculator 클래스이다.
# 1. The following is the Calculator class.

class Calculator:
    def __init__(self):
        self.value = 0

    def add(self, val):
        self.value += val

class UpgradeCalculator(Calculator):
    def minus(self, val):
        self.value -= val
# 위 클래스를 상속하는 UpgradeCalculator을 만들고 값을 뺄 수 있는 minus 메서드를 추가해 보자. 즉 다음과 같이 동작하는 클래스를 만들어야 한다.
# Let's create an UpgradeCalculator that inherits the above class and add a minus method that can subtract values. In other words, you need to create a class that works as follows.

cal = UpgradeCalculator()
cal.add(10)
cal.minus(7)

print(cal.value)

# 2. 객체변수 value가 100 이상의 값은 가질 수 없도록 제한하는 MaxLimitCalculator 클래스를 만들어 보자. 즉 다음과 같이 동작해야 한다.
# 2. Let's create a MaxLimitCalculator class that restricts the object variable value from having a value of 100 or more. In other words, it should work as follows.

class Calculator:
    def __init__(self):
        self.value = 0

    def add(self, val):
        self.value += val

class MaxLimitCalculator(Calculator):
    def add(self, val):
        self.value += val
        if self.value > 100:
            self.value = 100

cal = MaxLimitCalculator()
cal.add(50)
cal.add(60)

print(cal.value) # 100


# 3. 다음 결과를 예측해 보자.
# 3. Let's predict the next outcome.

# 1) >>> all([1, 2, abs(-3)-3])
# 2) >>> chr(ord('a')) == 'a'

# Answer : 1) abs는 절대값을 구하는 함수이기 때문에 abs(-3)-3 = 0, 0이 포함되기 때문에 False. 2) ord로 ASCII합수를 구했고, 그 코드를 chr을 통해 다시 문자로 바꿨다.

# 4. filter와 lambda를 사용하여 리스트 [1, -2, 3, -5, 8, -3]에서 음수를 모두 제거해 보자.
# 4. Use filters and lambda to remove all negative numbers from the list [1, -2, 3, -5, 8, -3].

print(list(filter(lambda x:x>0, [1, -2, 3, -5, 8, -3])))

# Answer : [1, 3, 8]

# 5. 234라는 10진수의 16진수는 다음과 같이 구할 수 있다.
# 5. The hexadecimal number of decimal 234 can be obtained as follows:

"""
>>> hex(234)
'0xea'
"""

# 이번에는 반대로 16진수 문자열 0xea를 10진수로 변경해 보자.
# Let's change the hexadecimal string 0xea to decimal this time.

print(int('0xea', 16)) # Answer : 234

# 6. map과 lambda를 사용하여 [1, 2, 3, 4] 리스트의 각 요소값에 3이 곱해진 리스트 [3, 6, 9, 12]를 만들어 보자.
# 6. Using map and lambda, make a list [3, 6, 9, 12] multiplied by 3 on each element value in the [1, 2, 3, 4] list.

print(list(map(lambda x:x*3, [1,2,3,4])))

# Answer : [3, 6, 9, 12]

# 7. 다음 리스트의 최대값과 최솟값의 합을 구해 보자.
# 7. Find the sum of the maximum and minimum values in the following list.

# [-8, 2, 7, 5, -3, 5, 0, 1]

num = [-8, 2, 7, 5, -3, 5, 0, 1]
print(max(num)+min(num))

# Answer : -1

# 8. 17 / 3의 결과는 다음과 같다.
# 8. 17 / 3 results are as follows.
"""
>>> 17 / 3
5.6666666666667
"""
# 위와 같은 결과값 5.6666666666667을 소숫점 4자리까지만 반올림하여 표시해 보자.
# Mark the result value 5.6666666667 by rounding it up to four decimal places.
num = 5.6666666666667
print(round(num, 4))

# Answer : 5.6667

# 9. 다음과 같이 실행할 때 입력값을 모두 더하여 출력하는 스크립트(C:\doit\myargv.py)를 작성해 보자.
# 9. Let's write a script (C:\doit\myargv.py) that outputs all of the inputs when you run:
"""
C:\> cd doit
C:\doit> python myargv.py
55
"""

import sys

numbers = sys.argv[1:]

result = 0
for number in numbers:
    result += number
print(result)

# Answer : python myargv.py 1 2 3 4 5 6 7 8 9 10   ->   55

# 10. os 모듈을 사용하여 다음과 같이 동작하도록 코드를 작성해 보자.
# 10. Let's use the os module to write the code so that it works as follows.
"""
1. C:\doit 디렉터리로 이동한다.
2. dir 명령을 실행하고 그 결과를 변수에 담는다.
3. dir 명령의 결과를 출력한다.
"""

# Answer :
"""
import os
os.chdir("c:\doit")
result = os.popen("dir")
print(result.read())
"""

# 11. time 모듈을 사용하여 현재 날짜와 시간을 다음과 같은 형식으로 출력해 보자.
# 11. Let's use the time module to print out the current date and time in the following format.
import time
print(time.strftime("%Y/%m/%d %H:%M:%S"))

# Answer : 2020/09/05 18:06:26

# 12. random 모듈을 사용하여 로또 번호(1~45 사의 숫자 6개)를 생성해 보자(단 중복된 숫자가 있으면 안 됨).
# 12. Use the random module to create a Lotto number (six numbers from 1-45) (but not duplicate numbers).
import random

result = []
while len(result) < 6:
    num = random.randint(1, 45)
    if num not in result:
        result.append(num)
    result.sort()

print(result)
